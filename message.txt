import psycopg2
from faker import Faker
from random import randrange, randint
from datetime import datetime, timedelta
import json

fake = Faker()
Faker.seed(randint(0, 100000))

conn = psycopg2.connect(user="postgres",
                                password="postgres",
                                host="127.0.0.1",
                                port="5432",
                                database="Test"
)


cur = conn.cursor()

#By default this will generate:
#20 Users
#5 Platforms
#5 Courses for each platform
#10 Reviews for each user
#


def insert(table, dict, commit = True):
    """
    Inserts values into a table.
    Parameters:
        table: string
        dict: dictionary
        commit: boolean
    """

    columns = ", ".join(dict.keys())
    values = ", ".join(['%({})s'.format(k) for k in dict.keys()])
    SQL = "INSERT INTO {0} ({1}) VALUES ({2});".format(table, columns, values)
    try:
        cur.execute(SQL, dict)
        conn.commit()
    except Exception as error:
        print(type(error))

def delete(table, id):



def deletePermanent(table, id):
    
    SQL = "DELETE FROM {0} WHERE {1} = {2}"


def generateTable(table, rows, dateStart = datetime.now() - timedelta(365) , dateFinish = datetime.now):
    if dateStart > dateFinish:
        raise Exception("Start date can't be later than finish date!")
    if rows < 1:
        raise Exception("Can't insert rows fewer than 1!")
    
    match table:
        case "users":
            #The first User is always the CEO, after that the levels are evenly distributed.
            #for example: 1 CEO, 6 Senior, 6 Medior, 6 Junior, 6 intern
            
        # case "courses":
        #     print("Under construction")
        # case "platforms":
        #     print("Under construction")
        # case "reviews":
        #     print("Under construction")
        # case "pictures":
        #     print("Under construction")
        # case "certification_id": 
        #     print("Under construction")
        # case "ongoing_training":
        #     print("Under construction")
        case _table:
            print("{0} is not supported!".format(_table))


def generateAllFresh(seed = randint(0, 100000)):
    """ Runs the DDL.sql file (which drops then regenerates all the tables) then inserts new values."""
    Faker.seed(seed)
    levels = ["Senior", "Medior", "Junior", "Intern"]
    SQL = "INSERT INTO {table} ({fields}) VALUES ({values});"
    cur.execute(open("DDL.sql", "r").read())

    users = [{
            "employer_number": 1,
            "username": fake.simple_profile()["username"],
            "password": "asdf1234",
            "level": "CEO"
    }]

    for i in range(1, 5):

        users.append({
            "employer_number": randrange(1, i+1, 1),
            "username": fake.simple_profile()["username"],
            "password": "asdf1234",
            "level": levels[0]
        })
    for i in range(5, 10):

        users.append({
            "employer_number": randrange(1, i+1, 1),
            "username": fake.simple_profile()["username"],
            "password": "asdf1234",
            "level": levels[1]
        })
    for i in range(10, 15):

        users.append({
            "employer_number": randrange(1, i+1, 1),
            "username": fake.simple_profile()["username"],
            "password": "asdf1234",
            "level": levels[2]
        })
    for i in range(15, 20):
        users.append({
            "employer_number": randrange(1, i+1, 1),
            "username": fake.simple_profile()["username"],
            "password": "asdf1234",
            "level": levels[3]
        })
        print(users[i])

    for user in users:
        insert("users", user, False)
    conn.commit()


#generateAllFresh()
#fakeDate = fake.date_between_dates(datetime(2022, 1, 1), datetime(2023, 1, 1))
#print(fakeDate)
print(datetime.now() - timedelta(365))

generateTable("asdf", 10)


insert("users", {"employer_number": 1, "username": "asdf001", "password": "asdf1234", "level": "Senior"})